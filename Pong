#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Jul 31 18:45:58 2022

@author: michaelreuscher
"""

import pygame
import numpy as np

class Game:
    
    def __init__(self):
        pygame.init()
        self.screen = pygame.display.set_mode((800,600))
        self.clock = pygame.time.Clock()
        
        self.p1_pos = np.array([10,250])
        self.p2_pos = np.array([780,250])
        self.ball_pos = np.array([385,285])
        
        self.ball_acceleration = np.array([5,1])
        self.player_acceleration = np.array([0,4])
    
        self.game_loop()
        
    def reset(self):
        self.p1_pos = np.array([10,250])
        self.p2_pos = np.array([780,250])
        self.ball_pos = np.array([385,285])
        
        
    def game_loop(self):
        while True:
            self.clock.tick(60)
            self.screen.fill((0,0,0))
            self.input()
            self.update()
            self.draw()
            
            
            pygame.display.flip()
        
    def input(self):
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                
        if pygame.key.get_pressed()[pygame.K_w]:
            self.p1_pos += self.player_acceleration * np.array([0, -1])
            
        if pygame.key.get_pressed()[pygame.K_s]:
            self.p1_pos += self.player_acceleration
        
        if pygame.key.get_pressed()[pygame.K_UP]:
            self.p2_pos += self.player_acceleration * np.array([0, -1])
            
        if pygame.key.get_pressed()[pygame.K_DOWN]:
            self.p2_pos += self.player_acceleration
    
    def update(self):
        if self.ball_collision_screen_left() or self.ball_collision_screen_rigth():
            self.reset()
            
        if self.ball_player_collision():
            self.ball_acceleration = self.ball_acceleration * np.array([-1, 1])
            
        if self.ball_collision_screen_top() or self.ball_collision_screen_bottom():
            self.ball_acceleration = self.ball_acceleration * np.array([1, -1])
            
        
        self.ball_pos += self.ball_acceleration
        
    
    def draw(self):
        pygame.draw.rect(self.screen, pygame.Color(255, 0, 0), (self.p1_pos[0], self.p1_pos[1], 10, 100))
        pygame.draw.rect(self.screen, pygame.Color(255, 0, 0), (self.p2_pos[0], self.p2_pos[1], 10, 100))
        pygame.draw.rect(self.screen, pygame.Color(255, 0, 0), (self.ball_pos[0], self.ball_pos[1], 15, 15))
        
    def ball_player_collision(self):
        return self.ball_player1_collision() or self.ball_player2_collision()
        
    def ball_player1_collision(self):
        return self.aabb_collision(self.p1_pos[0], self.p1_pos[1], 10, 100, self.ball_pos[0], self.ball_pos[1], 15, 15)
    
    def ball_player2_collision(self):
        return self.aabb_collision(self.p2_pos[0], self.p2_pos[1], 10, 100, self.ball_pos[0], self.ball_pos[1], 15, 15)
        
    def aabb_collision(self, a_x, a_y, a_width, a_heigth, b_x, b_y, b_width, b_heigth):
        collision_x = a_x + a_width >= b_x and b_x + b_width >= a_x
        collision_y = a_y + a_heigth >= b_y and b_y + b_heigth >= a_y
        
        return collision_y and collision_x
    
    def ball_collision_screen_left(self):
        return self.ball_pos[0] <= 0
    
    def ball_collision_screen_rigth(self):
        return self.ball_pos[0] + 15 >= 800
    
    def ball_collision_screen_top(self):
        return self.ball_pos[1] <= 0
    
    def ball_collision_screen_bottom(self):
        return self.ball_pos[1] + 15 >= 600
    
        
        
    
Game()